install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
z
info()
bye()
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
1
swirl()
x <- list(2, "a", "b", TRUE)
X[[2]]
x[[2]]
x <- 1:4
y<-2:3
x+y
class(x+y)
x <- 4L
class(x)
x<-1:4
y<-2
class(x+y)
x+y
z<-3:4
class(x+z)
x<-c(4, true)
x<-c(4, "true")
class(x)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f93
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
g
f
z
d
L
library(swirl)
swirl()
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect[[num_vect<1]]
tf<-num_vect[num_vect<1]
tf<- num_vect<1
tf
num_vect>=6
my_char<-c("My", "Name", "is")
my_char<-c ("My", "Name", "is")
my_char
info()
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Jenni")
my_name <- c(my_char, "Jenni")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
a <- c(1:3)
paste(1:3, c("X", "Y", "Z"), sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- 5
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_sqrt <- z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
argr(list.files)
list.files()
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" , "mytest2.R")
file.copy("mytest3.R", "mytest3.R" )
file.copy("mytest2.R", "mytest3.R" )
file.path("mytest3.R")
file.path('folder1', 'folder2', "mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", "testdir3" file.path("testdir2", "testdir3"))
dir.create("testdir2", "testdir3", file.path("testdir2", "testdir3"))
dir.create(file.pate("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive=TRUE)
setwd("old.dir")
setwe("Desktop")
setwd("Desktop")
setwd("mmarkets")
dir()
setwd(old.dir)
unlink("testdir", recursive=TRUE)
5+7
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- ("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Jenni")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " "),
paste("Hello", "world!", sep = " ")
paste("Hello", "world!", collapse = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
paste(LETTERS, 1:4, sep = "-")
paste(LETTERS, 1:4, collapse = "-")
class(paste(LETTERS, 1:4, sep = "-"))
class(paste(LETTERS, 1:4, collapse = "-"))
paste(LETTERS, 1:4)
paste(my_name)
paste(my_name, sep="-")
paste(my_name, collapse="")
paste(my_name, collapse=" ")
swirl()
swirl()
swirl()
1:20
pi:10
15:1
:
?:
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length =30)
length(my_seq)
1:length(my_seq)
length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times =40)
rep(c(0,1,2) times =10)
rep(c(0,1,2), times =10)
rep(0,1,2, times =10)
rep(c(0, 1, 2), each = 10)
library("swirl")
ls()
rm(list=ls())
ls()
swirl()
x[1:10]
x[is.na(x)]
y <- x[!is.n(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& X>0]
x[!is.na(x)& a>0]
x[!is.na(x)& x>0]
3rd <- c(x[3])
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo =11, bar =2, norf=NA)
vect
name("food")
names("food")
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar" , "norf")
indentical(vect, vect2)
identical( vect, vect2)
1
vect["bar"]
vect[c ("foo", "bar")]
library(datasets)
data(iris)
mean(sepal.length)
?iris
setwd("~/Desktop/courseraHW/ProgrammingAssignment2")
makeCacheMatrix
ls()
getwd()
cachematrix.R
dir()
open cachematrix.R
makeCacheMatrix
